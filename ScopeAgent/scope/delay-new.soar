# propose delay-new whenever a new task tries to start
sp {propose*delay-new
   (state <s> ^name release-decision
              ^io.input-link.task <task>)
   (<task> ^release yes)
-->
   (<s> ^operator <o> +)
   (<o> ^name delay-new
        ^task <task>)
   # TODO ^task is unnecessary if we are guaranteed only
   # one new task per decision cycle
}

# micromodel: we only have procedural working memory enough
# to delay one task at a time.
# therefore, make delay-new proposals worst if there is already
# a delayed task
sp {elaborate*reject*delay-new*if*one*delayed
   (state <s> ^name release-decision
              ^io.input-link.task.delayed yes
              ^operator <o> +)
   (<o> ^name delay-new)
-->
   (<s> ^operator <o> <)
}

# micromodel: between delaying and ignoring a task,
# prefer to delay it, so it doesn't get lost
sp {elaborate*prefer*delay*to*ignore
   (state <s> ^name release-decision
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name delay-new
         ^task <task>)
   (<o2> ^name ignore-new
         ^task <task>)
-->
   (<s> ^operator <o1> > <o2>)
}

# elaborate delay-new operators with the workload that would
# result if they were accepted and nothing interrupted
sp {elaborate*delay-new*workload
   (state <s> ^name release-decision
              ^operator <o> +
              ^workload <workload>)
   (<o> ^name delay-new
        ^task.workload <new-workload>)
-->
   (<o> ^workload (+ <workload> <new-workload>))
}

# apply the delay-new operator
# set the output command
sp {apply*delay-new
   (state <s> ^name release-decision
              ^operator <o>
              ^io.output-link <output>)
   (<o> ^name delay-new
        ^task <task>)
   # for debug output
   (<task> ^taskID <taskID>)
-->
   (<output> ^strategy <st>)
   (<st> ^name delay-new
         ^task <task>)
   (write (crlf) |Delay new task: | <taskID>)
}